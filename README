该框架搭建全过程
第一步：ssm搭建
1.导入ssm的相关jar包，由maven管理
    (1)pom.xml注意设置编码格式为UTF-8;
    (2)pom.xml可以统一设置版本号, eg:<spring-version>4.0.4.RELEASE</spring-version>
2.编辑ssm的配置文件
    (1)spring-dao.xml
        1)先配置PropertyPlaceholderConfigurer指向db.properties配置文件
        2)配置阿里德鲁伊druid数据库连接池DruidDataSource==>数据源dataSource
        3)配置mybatis,创建SqlSessionFactory,同时指向数据源dataSource
            并扫描mybatis全局配置mybatis-config.xml(configLocation),实体类typeAliasesPackage,映射文件mapperLocations,dao接口MapperScannerConfigurer
    (2)spring-service.xml
        1)扫描包(包含子包)下所有使用注解的类型context:component-scan
        2)配置事务管理器DataSourceTransactionManager
        3)开启注解管理事务行为tx:annotation-driven  指向事务管理器
    (3)spring-web.xml
        1)开启SpringMVC注解模式mvc:annotation-driven
        2)静态资源默认servlet配置mvc:default-servlet-handler
        3)扫描包Controller(context:component-scan)
        4)对静态资源文件的访问mvc:resources location="/resources/" mapping="/resources/**/"
        5)视图解析器配置MyMultipleViewResolver(自定义视图解析器,需要自己创建一个)
        6)全局异常捕捉MyExceptionResolver(自定义异常解析器,需要自己创建一个)
    (4)mybatis-config.xml
        1)配置全局属性
            使全局的映射器启用或禁用缓存cacheEnabled
            这是默认的执行类型defaultExecutorType(REUSE)
            获取数据库自增主键值useGeneratedKeys
    (5)web.xml
        1)配置servlet去加载spring的配置文件DispatcherServlet
        2)servlet-mapping
3.按照mvc模式写一个例子
    1)写实体类,映射文件,mapper接口,业务层接口,业务层实现类,控制层
    2)写jsp页面 接收后台传递数据处理
    3)部署tomcat运行

第二步：增加常见工具类
    AssertUtil：断言   用于验证传入的参数是否为null,如果是则抛非法参数异常,异常信息可以自己指定
    StringExUtil：字符串工具类,有点鸡肋,拓展的功能基本在StringUtils有,建议看源码
    CodeCostants：共用常量
    RegexCostants：正则表达式常量   收集所有要验证的正则表达式   供正则工具类使用
    RegexUtil：正则工具类 验证
    DateExUtil：DateUtil的拓展工具类   引入ImmutableMap需要google-collections的jar包

第三步：整合velocity引擎
    (1)加入velocity,velocity-tools,spring-context-support三个jar包(pom.xml)
    (2)新增spring-web.xml的velocity配置
        1)配置bean(VelocityConfigurer)==>resourceLoaderPath和velocityProperties
        2)配置velocityProperties时要新增macro/macro.vm   要了解下这个macro.vm是什么作用
        3)配置velocity视图解析器
            toolboxConfigLocation要新增toolbox.xml  可以定义静态资源和后台传递的动态数据  用$.keyName去获取
            viewClass 要自定义一个VelocityToolbox2View   要知道为什么自定义个 作用

第四步：整合bootstrap前端框架
    (1)在webapp/resources 底下加入boostrap源包的dist文件
    (2)在webapp/resources/js 新建vendor文件夹,专门用来引入第三方组件
        加入font-awesome组件,提供可缩放矢量图标
        加入jquery组件
        ...(可以更多)
    (3)做一个具有表格组件的测试页面examplePage.vm
        1)在webapp/resources/plugins 放入自定义组件：加入table组件(table.min.css + table.min.js)
        2)#parse('common/meta.vm')  新建一个meta.vm
            修改前面引入的font-awesome的css文件路径
            引入新增的meta.min.css(新建)
        3)#parse('common/lib.vm') 新建一个lib.vm
            新增resources/js/vendor.dll.min.js
            新增resources/js/common/lib.min.js
            新增resources/plugins/base.min.js

第五步：加入分页pageHelper  完成表格组件的测试页面examplePage.vm
    (1)加入pagehelper,jsqlparser两个jar包(pom.xml)
    (2)新增mybatis-config.xml的pageHelper配置(源码的重要性！)
        此处要记住如果用的是pageHelper的版本是5.0.0,那么配置plugin interceptor="com.github.pagehelper.PageHelper会报错ClassCastException
            因此要改成plugin interceptor="com.github.pagehelper.PageInterceptor实现interceptor接口
    (3)copy一份原来的PageInfo,自定义一份
    (4)新增一个PageData 继承HasMap  在BaseController调用    作用？
    (5)后台传递数据到前台，前台接收
        若后台传递为List<entity>,就用velocity的foreach接收展示;
        但是统一后台回显的格式为List<Map<String,Object>>  配合这个table组件

    访问地址：http://localhost:8080/example/examplePage   运行可见效果

第六步：使用 logback + slf4j 进行日志记录
    (1)加入slf4j-api,logback-classic两个jar包(pom.xml)
    (2)编写logback.xml(位于classpath目录下，此处为src/main/resources目录)
    (3)在程序中使用Logger logger = LoggerFactory.getLogger(Test.class);

